* prologue
* ch 1 - good parts
provides a nice testing ground file

I learned that the formatting of the '<pre>' tags is literal and puts some extra whitespace in if there is whitespace there.
* ch 2 grammar
** comments
block comments and single line comments. use single line comments to avoid problems with embedded symbols that might terminate block comments.
** names
plenty of reserved words, but otherwise seems to be the standard rules. starts with a letter and can have underscores and numbers inside.
** numbers
says here that all numbers are 64 bit doubles and that "A large class of numeric type errors is avoided." Unfortunately, I say, a large number of numeric errors is now possible. http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
numbers have methods though, and a math module to act on numbers.
** strings
single quotes or double quotes

backslash escape

all 16 bit chars, UTF-16? UCS2?

no character type, use single length strings.

strings are immutable, compared by contents, and have methods
** statements
compilation unit is made up of statements

each script tag is a compilation unit

when a script tag is encountered, it is immediately executed

all compilation units are in a global namespace, as there is no linker.

var statements for private variables


if switch while for do break return throw


has blocks, but blocks do not scope

labels

for conditionals, everything but falsy things is true, which includes random objects, etc.

false is :
 - false
 - null
 - undefined
 - empty string ''
 - number 0
 - number NaN

switch matches on strings and numbers (not objects)

while loop is standard

for loops have normal three clause form, as well as a foreach form as "for x in y"
gotcha on foreach form is to check object.hasOwnProperty(var) to make sure the object under test itself has the variable, and not a different object in the prototype chain (what is prototype chain?)

do while is standard

try catch seems to catch everything ? 

throw sends a whole object, by convention containing 'name' and 'message'

return can have a value or not. if it doesn't the value is 'undefined'.
no newline between return and the thing being returned.

break exits from loop or switch, as well as labeled blocks if given a label.

expression
 - assignment
 - invocation of method
 - delete object property

single '=' used for assignment
triple '===' used for comparison

literal values are expressions
invocation new
refinement delete
subexpression in parens
expression preceded by assignment
ternary '?'

operators have precedence

typeof returns a string

&& and || produce the value of the triggering operand, or the last if none.

invocation executes a function ()

refinement accesses a property or specific element of an object or array
this is dot references and [] reference

literals
- string
- number
- object
- array
- function
- regex

functions
have literals, with optional names for recursive calling
internal variable definitions

I really like the railroad diagrams.

* ch 3 objects
simple types are:
- numbers
- strings
- booleans
- null
- undefined
all other types are objects

 - numbers,
 -  strings
 -  booleans
 are immutable, but have methods

objects are mutable keyed collections
functions are objects, arrays ar objects, regexs are objects, and objects are objects

objects is container of properties, which are key-value pairs.

keys can be any string (even ''), values can be any object except for undefined

objects do not have classes. 

prototype linkage, allows one object to inherit the properties of another. (claim of reduced initialization and memory consumption)

** object literals.
create new objects
curly braces with key-value pairs separated by commas

key is any string, but does not necessarily need to be quoted. (probably best to always quote, I imagine)

objects can obviously nest

values retrieved with [], shortcut of using dot reference, similarly to unquoted strings for keys in creation

common paradigm of || used to return a default value

use paradigm of && for nullcheck

objects are mutable, so values can be updated. they can be created if they do not exist, or replaced if they do.

passed by reference. never copied.

** prototypes

all objects linked to a prototype Object.prototype

when making an object, it is possible to select the prototype.

provided create method creates a new object using an old object as prototype.

editing the original object edits the new object, but editing the new object does not edit the original object. 

this is a 'defaulting' lookup. if it doesn't exist on the current object, it looks in the parent prototype

this relationship is constant and dynamic. any change at a higher level affects all those at lower levels. 
** reflection
inspect an object by attempting to retrieve values. typeof can be used to check the values.

anything in the prototype chain can be found, including defaults like toString and constructor

paradigm of ignoring function values, because mainly data is what is being looked for.

other paradigm is using "hasOwnProperty" method which looks at only the current definition and not the prototype chain.


** enumeration
'for in' loops over all the keys in an object
commonly used with filters of hasOwnProperty and/or is not a function.

no guratneed order. so if wanted in an order, make an array, and iterate through that.

** delete 
deletes a key value pair

** keeping globals under control

make a single global variable for everything to be under.


* ch 4 functions 

closures!

function encloses statements. fundamental modular unit. 

functions are objects. function objects are linked to Function.prototype. each function has two hidden properties. the context, and the implementation

hasa 'prototype' property, with a value of an object, with a 'constructor' property which has the value of the function body.

complicated.


functions can be used like any othe robjects. the can be stored, and passed, and returned. functions can even have methods.

functions uniquely, can be invoked.

** function literals
four parts
- function
- name, optional, can be used for recursive calls. usable by debuggers and dev tools. does not need to be given a name.
- parameters - inside parens, separated by commas. initilized to arguments supplied when invoked.
- body - executed statements when function is invoked

functions can be defined nearlyanywhere, even inside other functions. inner functions can access variables inside of the outer function.
functions object created by literal has link to the context it is defined within. closure.

** invocation
besirdes the declared parameters, also have 'this' and 'arguments'

four kinds of invocation:
 - method
 - function
 - constructor
 - apply
the type of invocation determines the initialization of 'this'

invocation is pair of parens, following an expression that produces a function value. the parens contain comma separated expressions that produce the argument values, which get assignd to parameter names. 
no runtime error for mismatch. too few , missing are substituted with undifined, too many, extra are ignored. no type checking. anything goes anywhere.

** method invocation
function stored in property of an object. 'this' is bound to the enclosing object.

** function invocation
not property of object. 'this' is bound to global.

paradigm of variable called 'that' to pass the enclosing state to inner funcitons.
** constructor
prototypal, not classical. still, 'new' is provided.

I don't get this. 

convention is capitalized name.

when called without new, bad stuff happens.

don't use these

** apply
functions with methods.

construct an array of args to invoke the function, choosing the value of 'this'

two parameters, first is 'this', second is array of args

** args
hidden parameter is array 'arguments' which has all of the arguments, named, plus the extra ones.

allows a sort of 'varargs' like implementation, but convention is to manually pass an array.

it's not an array, but is 'array-like' missing some array methods.

** return.
exit early. returning a value, or undefined if nothing is given.

** exceptions
normal object, that should have 'name' and 'message'

catch block gets all exceptions. to filter specific ones, the exception must be examined.

** augmenting
adding a method to the prototype makes it available to all.

can augment even the builtins


** recursion

a recursive function calls itself.

useful for walking the dom.

no tail call recursion

** scope
function scope but not block scope.

** closure
inner functions get access to the variables of the functions they are defined within.
the inner function can have a longer lifetime than the outer function, if it escapes, or is returned.

** callbacks
async

create a function that is passed in, to be called at some time later when something else is done.

** modules

gensym

** cascade
dot dot dot

method chaining.

** currying

augmenting the function proototype. which saves the arguments, and uses apply.


** memoize

use a closure to store state
* ch 5 inheritance
types and code reuse

possible inheritence patterns

prototypes screw things up again.

spends a bunch of time making it more java-normal like


object specifier, instead of arguments, this is essentially keyword args

differential inheritance with prototypes, is all about specifying what's different, and letting the higher level prototype shine through when nothing needs to be changed.

no privacy. except if hidden in a function.

need to read this again

* ch 6 arrays
arrays aren't really arrays. subscripts are turning into strings to make properties.

really an associative array.

mainly just like accessing object information, but with a special format, and extra methods

literal form is square brackets surrounding values separated by commas. the keys by default become '0', '1', '2', etc.


arrays have length. length is not necessarily the number of things in the array.

four billion max.

length can be set directly. larger does not allocate, smaller truncates everything larger.

paradigm of assigning item to array.length, but there exists a push method to do it as well.


delete still works, but leaves a hole in the array. splice is a workaround for the hole issue, 

for in still works over array objects, but it still grabs things it shouldn't, and it still doesn't go in order.



* ch7 regexes

created specifically formatted
have an exec method 
capturing groups, named matches
result array.

noncapturing groups are more efficient.


literals are enclosed in brackets. also have a ReqExp constructor which takes a string.

have properties, global, ignorecate, lastindex, multiline, source

literals are all the same (so not threadsafe to use?)

groups:
 - capturing
 - noncapturing
 - positive lookahead
 - negative lookahead

quantifiers and greedy vs lazy matching


